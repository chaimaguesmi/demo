import { type ComponentType, type ReactNode } from 'react';
import { type SelectElement, type SelectProps as _SelectProps } from './generated/Select.js';
import type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';
export * from './generated/Select.js';
export type SelectReactRendererProps = ReactSimpleRendererProps<SelectElement>;
export type SelectProps = Partial<Omit<_SelectProps, 'children' | 'renderer'>> & Readonly<{
    children?: ReactNode | ComponentType<SelectReactRendererProps>;
    renderer?: ComponentType<SelectReactRendererProps> | null;
}>;
declare const ForwardedSelect: import("react").ForwardRefExoticComponent<Partial<Omit<_SelectProps, "children" | "renderer">> & Readonly<{
    children?: ReactNode | ComponentType<SelectReactRendererProps>;
    renderer?: ComponentType<Readonly<{
        original: SelectElement;
    }>> | null | undefined;
}> & import("react").RefAttributes<SelectElement>>;
export { ForwardedSelect as Select };
//# sourceMappingURL=Select.d.ts.map