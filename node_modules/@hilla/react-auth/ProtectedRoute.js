import { jsx } from "react/jsx-runtime";
import { useContext } from "react";
import { Navigate, useLocation } from "react-router-dom";
import { AuthContext } from "./useAuth.js";
function ProtectedRoute({ redirectPath, access, element }) {
  const {
    state: { initializing, loading, user },
    hasAccess
  } = useContext(AuthContext);
  const location = useLocation();
  if (initializing || loading) {
    return /* @__PURE__ */ jsx("div", {});
  }
  if (!hasAccess(access)) {
    return /* @__PURE__ */ jsx(Navigate, { to: redirectPath, state: { from: location }, replace: true });
  }
  return element;
}
const collectRoutes = (routes) => {
  const allRoutes = [];
  routes.forEach((route) => {
    allRoutes.push(route);
    if (route.children !== void 0) {
      allRoutes.push(...collectRoutes(route.children));
    }
  });
  return allRoutes;
};
const protectRoutes = (routes, redirectPath = "/login") => {
  const allRoutes = collectRoutes(routes);
  allRoutes.forEach((route) => {
    const { handle } = route;
    const requiresAuth = handle?.requiresLogin ?? handle?.rolesAllowed?.length;
    if (requiresAuth) {
      route.element = /* @__PURE__ */ jsx(
        ProtectedRoute,
        {
          redirectPath,
          access: route.handle,
          element: route.element
        }
      );
    }
  });
  return routes;
};
export {
  protectRoutes
};
//# sourceMappingURL=ProtectedRoute.js.map
