function __REGISTER__(feature) {
  window.Vaadin ??= {};
  window.Vaadin.registrations ??= [];
  window.Vaadin.registrations.push({
    is: feature ? `${"@hilla/react-form"}/${feature}` : "@hilla/react-form",
    version: "2.5.5"
  });
}
import {
  _fromString,
  _validity,
  BinderRoot,
  CHANGED,
  getBinderNode,
  getDefaultFieldStrategy,
  hasFromString,
  isFieldElement
} from "@hilla/form";
import { useEffect, useMemo, useReducer, useRef } from "react";
__REGISTER__();
function useUpdate() {
  const [_, update] = useReducer((x) => x + 1, 0);
  return update;
}
function convertFieldValue(model, fieldValue) {
  return typeof fieldValue === "string" && hasFromString(model) ? model[_fromString](fieldValue) : fieldValue;
}
function getFormPart(node) {
  return {
    addValidator: node.addValidator.bind(node),
    defaultValue: node.defaultValue,
    dirty: node.dirty,
    errors: node.errors,
    invalid: node.invalid,
    model: node.model,
    name: node.name,
    ownErrors: node.ownErrors,
    required: node.required,
    setValidators(validators) {
      node.validators = validators;
    },
    setValue(value) {
      node.value = value;
    },
    setVisited(visited) {
      node.visited = visited;
    },
    validate: node.validate.bind(node),
    validators: node.validators,
    value: node.value,
    visited: node.visited
  };
}
function useFields(node) {
  return useMemo(() => {
    const registry = /* @__PURE__ */ new WeakMap();
    return (model) => {
      const n = getBinderNode(model);
      let fieldState = registry.get(model);
      if (!fieldState) {
        fieldState = {
          element: void 0,
          errorMessage: "",
          invalid: false,
          markVisited() {
            n.visited = true;
          },
          ref(element) {
            if (!element) {
              fieldState.element?.removeEventListener("change", fieldState.updateValue);
              fieldState.element?.removeEventListener("input", fieldState.updateValue);
              fieldState.element?.removeEventListener("blur", fieldState.markVisited);
              fieldState.strategy?.removeEventListeners();
              fieldState.element = void 0;
              fieldState.strategy = void 0;
              return;
            }
            if (!isFieldElement(element)) {
              throw new TypeError(`Element '${element.localName}' is not a form element`);
            }
            if (fieldState.element !== element) {
              fieldState.element = element;
              fieldState.element.addEventListener("change", fieldState.updateValue);
              fieldState.element.addEventListener("input", fieldState.updateValue);
              fieldState.element.addEventListener("blur", fieldState.markVisited);
              fieldState.strategy = getDefaultFieldStrategy(element, model);
            }
          },
          required: false,
          strategy: void 0,
          updateValue() {
            if (fieldState.strategy) {
              fieldState.strategy.invalid = false;
              fieldState.strategy.checkValidity();
              n[_validity] = fieldState.strategy.validity;
              n.value = convertFieldValue(model, fieldState.strategy.value);
            }
          }
        };
        registry.set(model, fieldState);
      }
      if (fieldState.strategy) {
        const valueFromField = convertFieldValue(model, fieldState.strategy.value);
        if (valueFromField !== n.value && !(Number.isNaN(n.value) && Number.isNaN(valueFromField))) {
          fieldState.strategy.value = n.value;
        }
        if (fieldState.required !== n.required) {
          fieldState.required = n.required;
          fieldState.strategy.required = n.required;
        }
        const firstError = n.ownErrors.at(0);
        const errorMessage = firstError?.message ?? "";
        if (fieldState.errorMessage !== errorMessage) {
          fieldState.errorMessage = errorMessage;
          fieldState.strategy.errorMessage = errorMessage;
        }
        fieldState.invalid = n.invalid;
        fieldState.strategy.invalid = n.invalid;
      }
      return {
        name: n.name,
        ref: fieldState.ref
      };
    };
  }, [node]);
}
function useForm(Model, config) {
  const configRef = useRef({});
  configRef.current.onSubmit = config?.onSubmit;
  configRef.current.onChange = config?.onChange;
  const update = useUpdate();
  const binder = useMemo(() => new BinderRoot(Model, configRef.current), [Model]);
  const field = useFields(binder);
  useEffect(() => {
    binder.addEventListener(CHANGED.type, update);
  }, [binder]);
  return {
    ...getFormPart(binder),
    clear: binder.clear.bind(binder),
    field,
    read: binder.read.bind(binder),
    reset: binder.reset.bind(binder),
    setDefaultValue(defaultValue) {
      binder.defaultValue = defaultValue;
    },
    setValue(value) {
      binder.value = value;
    },
    submit: binder.submit.bind(binder),
    value: binder.value,
    submitting: binder.submitting,
    update
  };
}
function useFormPart(model) {
  const binderNode = getBinderNode(model);
  const field = useFields(binderNode);
  return {
    ...getFormPart(binderNode),
    field
  };
}
export {
  useForm,
  useFormPart
};
//# sourceMappingURL=index.js.map
